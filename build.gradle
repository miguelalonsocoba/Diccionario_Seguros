plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'war'
	id 'jacoco'
}

group = 'com.example.dicionario'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	// LOMBOK
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	//Swagger2
	implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
	testRuntimeOnly "org.junit.platform:junit-platform-commons:1.7.0"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // Report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // Tests are required to run before generating the report
}

build {
	dependsOn jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.8
      }
      excludes = [
      	'com.example.diccionario.constants'
      ]
    }
  }
}

// Configuracion de los ajustes del complemento JaCoCo.
jacoco {
	toolVersion = "0.8.5" // Verion de los JAR de Jacoco a utilizar.
	reportsDir = file("$buildDir/customJacocoReportDir") // El directorio donde se generaran los informas
}

